--This program will validate credit card numbers, eventually.

-- Takes a number and determines how many digits are
-- available by dividing them by intervals of 10^0 - 10^10000.
intList :: Integer -> [Integer]
intList x = [x `div` (10^y) | y <- [1000,999..0]]

--Uses the number list generated by 'intList' and 
--filters out all the zeroes to ensure an accurate digit
--count.
intList2 :: Integer -> [Integer]
intList2 x = [x | x <- (intList x), x /=0]

toDigits :: Integer -> [Integer]
toDigits 0 = [0]
toDigits x = [x `mod` 10 | x <- (intList2 x)]

--Reverses the output of "toDigits"
toDigitsRev :: Integer -> [Integer]
toDigitsRev 0 = [0]
toDigitsRev x = reverse(toDigits x)


--Doubles everyother digit within a list.
doubleEveryOther :: [Integer] -> [Integer]
doubleEveryOther []  = [0]
doubleEveryOther [x] = [x]
doubleEveryOther (x:y:zs) = x:y*2: doubleEveryOther zs

-- The output of doubleEeveryOther has a mix of one-digit and two-digit 
--numbers. Define function sumDigits

sumDigits' :: [Integer] -> [Integer]
sumDigits' [] = [0] 
sumDigits' (x:xs)
     | x < 10 = x : sumDigits' xs
     | x > 9 = (x-10+1) : sumDigits' xs 
    
sumDigits :: [Integer] -> Integer
sumDigits x  = sum(sumDigits' x) 

luhn' :: Integer -> Integer 
luhn' x  = (sumDigits (doubleEveryOther (toDigitsRev x))) `mod` 10

luhn :: Integer -> Bool
luhn x 
     | luhn' x == 0 = True 
     | luhn' x /= 0 = False
